generator client {
  provider = "prisma-client-js"
}

// Add a check for node_env to determine whoch db to use 

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String
  link        String
}

model User {
  id String @id @default(uuid())

  first_name        String?
  last_name         String?
  cardholder_id     String?
  email             String           @unique
  hash              String?
  phone_number      String?
  password          String?
  otp               String?
  otp_expires_at    DateTime?
  role              Role?            @default(user)
  gender            Gender?
  date_of_birth     DateTime?
  profile_image     ProfileImage?
  address           Address?
  is_email_verified Boolean          @default(false)
  kyc_verification  KycVerification?
  wallet            Wallet?
  refreshToken      RefreshToken?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  accounts Account[] @relation("UserAccounts")
  cards    Card[]
}

model ProfileImage {
  id         String @id @default(uuid())
  userId     String @unique
  secure_url String
  public_id  String
  user       User   @relation(fields: [userId], references: [id])
}

model Address {
  id           String  @id @default(uuid())
  userId       String  @unique
  city         String?
  state        String?
  country      String?
  home_address String?
  house_number String?
  postal_code  String?
  user         User    @relation(fields: [userId], references: [id])
}

model KycVerification {
  id          String       @id @default(uuid())
  userId      String       @unique
  is_verified Boolean      @default(false)
  id_type     KycIdType?
  id_no       String
  status      KycIdStatus?
  user        User         @relation(fields: [userId], references: [id])
}

enum Role {
  user
  admin
  super_admin
}

enum Gender {
  male
  female
}

enum KycIdStatus {
  pending
  approved
  rejected
}

enum KycIdType {
  NIGERIAN_BVN_VERIFICATION
  NIGERIAN_NIN
  NIGERIAN_INTERNATIONAL_PASSPORT
  NIGERIAN_PVC
  NIGERIAN_DRIVERS_LICENSE
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([expiresAt], map: "expires_at_idx")
}

// Transaction Table

model TransactionHistory {
  id                    String             @id @default(uuid())
  account_id            String?
  user_id               String
  amount                Float?
  transaction_type      TransactionType?
  description           String?
  status                TransactionStatus? @default(pending)
  sender_details        SenderDetails?
  recipient_mobile      String?
  currency_type         CurrencyType?      @default(ngn)
  payment_method        PaymentMethod?     @default(paystack)
  icon                  TransactionIcon?
  fee                   Float?             @default(0.0)
  balance_before        Float              @default(0)
  balance_after         Float              @default(0)
  transaction_number    String?
  transaction_reference String?            @unique
  session_id            String?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
}

enum TransactionType {
  transfer
  deposit
  airtime
  data
  cable
  education
  betting
}

enum TransactionStatus {
  pending
  success
  failed
  cancelled
}

enum CurrencyType {
  ngn
  usd
  gbp
  eur
}

enum PaymentMethod {
  paystack
  card
  bank_transfer
  wallet
  ussd
}

model SenderDetails {
  id                    String             @id @default(uuid())
  transaction_id        String             @unique
  sender_name           String
  sender_bank           String
  sender_account_number String
  transaction           TransactionHistory @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
}

model TransactionIcon {
  id             String             @id @default(uuid())
  transaction_id String             @unique
  secure_url     String
  public_id      String
  transaction    TransactionHistory @relation(fields: [transaction_id], references: [id])
}

model Account {
  id             String       @id @default(uuid())
  user_id        String
  account_number String       @unique
  accountType    AccountType? @default(savings)
  currency       CurrencyType
  bank_name      String
  reference      String?
  order_ref      String?
  flutterwave_id String?
  bank_code      String?
  balance        Float        @default(0)
  isActive       Boolean      @default(true)
  meta_data      Json?        @default("{}")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation("UserAccounts", fields: [user_id], references: [id]) // Corrected relation
}

enum AccountType {
  savings
  current
  investment
}

model Wallet {
  id                 String  @id @default(uuid())
  user_id            String  @unique
  current_balance    Float   @default(0)
  all_time_fuunding  Float   @default(0)
  all_time_withdrawn Float   @default(0)
  isActive           Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])
}

model Card {
  id                    String              @id @default(uuid())
  user_id               String
  bridge_card_id        String?
  bridge_cardholder_id  String?             @default("null")
  card_currency         BridgeCurrencyType?
  masked_pan            String?
  expiry_month          String?
  expiry_year           String?
  card_type             String?
  first_funding_amount  Float?
  card_limit            Float?
  current_balance       Float?
  balance_before        Float?
  transaction_reference String?
  balance_after         Float?
  card_name             String?
  card_brand            String?
  card_last4            String?
  status                String?
  is_active             Boolean             @default(true)
  metadata              Json?               @default("{}")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  user User @relation(fields: [user_id], references: [id])
}

enum BridgeCurrencyType {
  NGN
  USD
  GBP
  EUR
}
